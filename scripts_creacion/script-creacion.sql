-- MySQL Script generated by MySQL Workbench
-- Fri Jan 15 15:55:16 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema proyecto
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema proyecto
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `proyecto` DEFAULT CHARACTER SET utf8 ;
USE `proyecto` ;

-- -----------------------------------------------------
-- Table `proyecto`.`empresa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`empresa` (
  `nif` VARCHAR(10) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`nif`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`profesor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`profesor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `dni` VARCHAR(10) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `area` ENUM('Analisis Matematico', 'Ingenieria del Software', 'Inteligencia Artificial', 'Ingenieria de Sistemas', 'Seguridad', 'Ingenieria del Hardware') NOT NULL,
  PRIMARY KEY (`id`, `dni`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`tfm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`tfm` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `fecha_ini` DATE NULL,
  `tema` VARCHAR(45) NOT NULL,
  `titulacion` VARCHAR(45) NOT NULL,
  `empresa_nif` VARCHAR(10) NULL,
  `profesor_id` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_tfm_empresa1_idx` (`empresa_nif` ASC)  ,
  INDEX `fk_tfm_profesor1_idx` (`profesor_id` ASC)  ,
  CONSTRAINT `fk_empresa_propone_tfm`
    FOREIGN KEY (`empresa_nif`)
    REFERENCES `proyecto`.`empresa` (`nif`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_profesor_propone_tfm`
    FOREIGN KEY (`profesor_id`)
    REFERENCES `proyecto`.`profesor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`tfg`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`tfg` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `fecha_ini` DATE NULL,
  `tema` VARCHAR(45) NOT NULL,
  `titulacion` VARCHAR(45) NOT NULL,
  `empresa_nif` VARCHAR(10) NULL,
  `profesor_id` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_tfg_empresa_idx` (`empresa_nif` ASC)  ,
  INDEX `fk_tfg_profesor1_idx` (`profesor_id` ASC)  ,
  CONSTRAINT `fk_empresa_propone_tfg`
    FOREIGN KEY (`empresa_nif`)
    REFERENCES `proyecto`.`empresa` (`nif`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_profesor_propone_tfg`
    FOREIGN KEY (`profesor_id`)
    REFERENCES `proyecto`.`profesor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`alumno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`alumno` (
  `alu` VARCHAR(45) NOT NULL,
  `dni` VARCHAR(10) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`alu`, `dni`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`seguimiento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`seguimiento` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nota` FLOAT NULL,
  `fecha` DATE NULL,
  `tfg_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_seguimiento_tfg1_idx` (`tfg_id` ASC)  ,
  CONSTRAINT `fk_seguimiento_controla_tfg`
    FOREIGN KEY (`tfg_id`)
    REFERENCES `proyecto`.`tfg` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`profesor_tutoriza_tfg`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`profesor_tutoriza_tfg` (
  `profesor_id` INT NOT NULL,
  `tfg_id` INT NOT NULL,
  `curso` YEAR(4) NOT NULL,
  `is_tutor` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`profesor_id`, `tfg_id`),
  INDEX `fk_profesor_has_tfg_tfg1_idx` (`tfg_id` ASC)  ,
  INDEX `fk_profesor_has_tfg_profesor1_idx` (`profesor_id` ASC)  ,
  CONSTRAINT `fk_profesor_has_tfg_profesor1`
    FOREIGN KEY (`profesor_id`)
    REFERENCES `proyecto`.`profesor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_profesor_has_tfg_tfg1`
    FOREIGN KEY (`tfg_id`)
    REFERENCES `proyecto`.`tfg` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`profesor_tutoriza_tfm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`profesor_tutoriza_tfm` (
  `profesor_id` INT NOT NULL,
  `tfm_id` INT NOT NULL,
  `curso` YEAR(4) NOT NULL,
  `is_tutor` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`profesor_id`, `tfm_id`),
  INDEX `fk_profesor_has_tfm_tfm1_idx` (`tfm_id` ASC)  ,
  INDEX `fk_profesor_has_tfm_profesor1_idx` (`profesor_id` ASC)  ,
  CONSTRAINT `fk_profesor_has_tfm_profesor1`
    FOREIGN KEY (`profesor_id`)
    REFERENCES `proyecto`.`profesor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_profesor_has_tfm_tfm1`
    FOREIGN KEY (`tfm_id`)
    REFERENCES `proyecto`.`tfm` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`profesor_evalua_tfg`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`profesor_evalua_tfg` (
  `id_tribunal` INT NOT NULL,
  `profesor_id` INT NOT NULL,
  `tfg_id` INT NOT NULL,
  `rol` ENUM('titular', 'suplente') NOT NULL,
  `lugar` VARCHAR(45) NULL,
  `fecha` DATE NULL,
  PRIMARY KEY (`id_tribunal`, `profesor_id`, `tfg_id`),
  INDEX `fk_profesor_has_tfg_tfg2_idx` (`tfg_id` ASC)  ,
  INDEX `fk_profesor_has_tfg_profesor2_idx` (`profesor_id` ASC)  ,
  CONSTRAINT `fk_profesor_has_tfg_profesor2`
    FOREIGN KEY (`profesor_id`)
    REFERENCES `proyecto`.`profesor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_profesor_has_tfg_tfg2`
    FOREIGN KEY (`tfg_id`)
    REFERENCES `proyecto`.`tfg` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`profesor_evalua_tfm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`profesor_evalua_tfm` (
  `id_tribunal` INT NOT NULL,
  `profesor_id` INT NOT NULL,
  `tfm_id` INT NOT NULL,
  `rol` ENUM('titular') NOT NULL DEFAULT 'titular',
  `lugar` VARCHAR(45) NULL,
  `fecha` DATE NULL,
  PRIMARY KEY (`id_tribunal`, `profesor_id`, `tfm_id`),
  INDEX `fk_profesor_has_tfm_tfm2_idx` (`tfm_id` ASC)  ,
  INDEX `fk_profesor_has_tfm_profesor2_idx` (`profesor_id` ASC)  ,
  CONSTRAINT `fk_profesor_has_tfm_profesor2`
    FOREIGN KEY (`profesor_id`)
    REFERENCES `proyecto`.`profesor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_profesor_has_tfm_tfm2`
    FOREIGN KEY (`tfm_id`)
    REFERENCES `proyecto`.`tfm` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`alumno_has_tfg`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`alumno_has_tfg` (
  `alumno_alu` VARCHAR(45) NOT NULL,
  `tfg_id` INT NOT NULL,
  `presenta` TINYINT NOT NULL DEFAULT 0,
  `realiza` TINYINT NOT NULL DEFAULT 0,
  `propone` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`alumno_alu`, `tfg_id`),
  UNIQUE INDEX `alumno_alu_UNIQUE` (`alumno_alu` ASC)  ,
  UNIQUE INDEX `tfg_id_UNIQUE` (`tfg_id` ASC)  ,
  CONSTRAINT `fk_tfg_id`
    FOREIGN KEY (`tfg_id`)
    REFERENCES `proyecto`.`tfg` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alumno_alu_tfg`
    FOREIGN KEY (`alumno_alu`)
    REFERENCES `proyecto`.`alumno` (`alu`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`alumno_has_tfm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyecto`.`alumno_has_tfm` (
  `alumno_alu` VARCHAR(45) NOT NULL,
  `tfm_id` INT NOT NULL,
  `presenta` TINYINT NOT NULL DEFAULT 0,
  `realiza` TINYINT NOT NULL DEFAULT 0,
  `propone` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`alumno_alu`, `tfm_id`),
  UNIQUE INDEX `alumno_alu_UNIQUE` (`alumno_alu` ASC)  ,
  UNIQUE INDEX `tfm_id_UNIQUE` (`tfm_id` ASC)  ,
  CONSTRAINT `fk_alumno_alu_tfm`
    FOREIGN KEY (`alumno_alu`)
    REFERENCES `proyecto`.`alumno` (`alu`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_tfm_id`
    FOREIGN KEY (`tfm_id`)
    REFERENCES `proyecto`.`tfm` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;
-- --------------------------------------------------------------------------------------------------------------
--                                            TRIGGERS 
-- --------------------------------------------------------------------------------------------------------------
-- controlar n√∫mero de profesores titulares y suplentes en los tribunales tfg (3 titulates, 2 suplentes) 
-- --------------------------------------------------------------------------------------------------------------
delimiter //
create trigger control_evaluacion_tfg before insert on profesor_evalua_tfg 
for each row 
begin
  declare rowcount INT;
  if new.rol = 'titular' then
    select count(*) into rowcount from profesor_evalua_tfg where new.id_tribunal = id_tribunal and rol = 'titular';
    if rowcount > 2 then 
      signal sqlstate '45000' set message_text = 'Numero de profesores Titulares excedidos para este tribunal';
    end if;
  elseif new.rol = 'suplente' then
    select count(*) into rowcount from profesor_evalua_tfg where new.id_tribunal = id_tribunal and rol = 'suplente';
    if rowcount > 1 then 
      signal sqlstate '45000' set message_text = 'Numero de Profesores Suplentes excedidos en este tribunal';
    end if;
  end if;
end;
//
delimiter ;
-- ---------------------------------------------------------------------------------------
-- controlar n√∫mero de profesores titulares y suplentes en los tribunales tfm(3 titulares)
-- ---------------------------------------------------------------------------------------
delimiter //
create trigger control_evaluacion_tfm before insert on profesor_evalua_tfm for each row 
begin
  declare rowcount INT;
  if new.rol = 'titular' then
    select count(*) into rowcount from profesor_evalua_tfm where new.id_tribunal = id_tribunal and rol = 'titular';
    if rowcount > 2 then signal sqlstate '45000'
      set message_text = 'Numero de profesores titulares para el tribunal de TFM excedidos';
    end if;
  end if;
end;
//
delimiter ;
-- -----------------------------------------------------------------------------------------
-- controlar numero de tutores (1 si o si) y cotutores (0 o 1) por cada proyecto (esto no se 
-- especifica en el ERE porque lleva a confusion pero si lo controlamos en el codigo)
-- -----------------------------------------------------------------------------------------
delimiter //
create trigger control_tutoriza_tfg before insert on profesor_tutoriza_tfg for each row
begin
  declare rowcount INT;
  if new.is_tutor = 0 then 
    select count(*) into rowcount from profesor_tutoriza_tfg where new.tfg_id=tfg_id and new.curso=curso and is_tutor=0;
    if rowcount > 0 then 
      signal sqlstate '45000' set message_text='Ya hay asignado un Co-tutor para este tfg en ese curso';
    end if;
  elseif new.is_tutor = 1 then 
    select count(*) into rowcount from profesor_tutoriza_tfg where new.tfg_id=tfg_id and new.curso=curso and is_tutor=1;
    if rowcount > 0 then signal sqlstate '45000' set message_text='Ya hay asignado un Tutor para este tfg en ese curso';
    end if;
  end if;
end;
//
delimiter ;
-- --------------------------------------------------------------------------------------------
-- controlar que la fecha de evaluaci√≥n tiene que ser despu√©s de la fecha de inicio del trabajo
-- --------------------------------------------------------------------------------------------
delimiter //
create trigger fecha_evaluacion_tfg_update before update on profesor_evalua_tfg 
for each row 
begin 
  if new.fecha < (select fecha_ini from tfg where new.tfg_id = tfg.id) then 
    signal sqlstate '45000' set message_text='La fecha de evaluaci√≥n es anterior a la realizacion del TFG';
  end if;
end;
//
delimiter ;

delimiter //
create trigger fecha_evaluacion_tfg_insert before insert on profesor_evalua_tfg 
for each row 
begin 
  if new.fecha < (select fecha_ini from tfg where new.tfg_id = tfg.id) then 
    signal sqlstate '45000' set message_text='La fecha de evaluaci√≥n es anterior a la realizacion del TFG';
  end if;
end;
//
delimiter ;

delimiter //
create trigger fecha_evaluacion_tfm_insert before insert on profesor_evalua_tfm 
for each row 
begin 
  if new.fecha < (select fecha_ini from tfm where new.tfm_id = tfm.id) then 
    signal sqlstate '45000' set message_text='La fecha de evaluaci√≥n es anterior a la realizacion del TFM';
  end if;
end;
//
delimiter ;

delimiter //
create trigger fecha_evaluacion_tfm_update before update on profesor_evalua_tfm 
for each row 
begin 
  if new.fecha < (select fecha_ini from tfm where new.tfm_id = tfm.id) then 
    signal sqlstate '45000' set message_text='La fecha de evaluaci√≥n es anterior a la realizacion del TFM';
  end if;
end;
//
delimiter ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
